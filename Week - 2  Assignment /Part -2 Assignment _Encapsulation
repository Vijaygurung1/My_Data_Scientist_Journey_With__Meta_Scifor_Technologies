# Question 2 : [ Write a documentation in "Python" which has "Encapsulation" Basics, Real-life Example and implementation ]

# [ Encapsulation Basics ] 

# Definitation :-

# Encapsulation is also an essential aspect of "OOPs". It is used to restrict access to the methods and variables. In Encapsulation code and data wrapped 
# together within a single unit from being modified by accident.

# Real-Life Example :-

# For example :-

# I have a bank_Account. The account has a balance and we can deposit or withdraw money.

# The balance is the "data" and the deposit and withdraw methods are the "methods" that operate on that data.
# The bank account is the encapsulated unit and the balance and methods are hidden from the outside world.

# Implementation :-

# The implementation of encapsulation in Python is shown in the BankAccount class. The class has three methods: [ Deposit, Withdraw and get_balance].
# The __balance attribute is the data that is encapsulated within the class. The methods operate on this data, but the data itself is hidden from the outside world.
# This code demonstrates the basics of encapsulation in Python, including the concept of bundling data and methods within a single unit, and providing a
# controlled interface to access and modify the data.


# Below is the code for these question.

class BankAccount:

    def __init__(self, initial_balance=0):
        self.__balance = initial_balance

    def deposit(self, amount):
        self.__balance += amount

    def withdraw(self, amount):
        if amount > self.__balance:
            raise ValueError("Insufficient balance")
        self.__balance -= amount

    def get_balance(self):
        return self.__balance

account = BankAccount(1000)
print(account.get_balance())  # Output: 1000

account.deposit(500)
print(account.get_balance())  # Output: 1500

account.withdraw(200)
print(account.get_balance())  # Output: 1300


# The outcome of these will be - 

# 1000
# 1500
# 1300

